import { expect, test } from "playwright-test-coverage";


test.describe('Order Flow', () => {

  test('should allow a logged-out user to order by logging in during checkout', async ({ page }) => {
    // --- 1. MOCK ALL NECESSARY API CALLS ---

    // Mock the FIRST call to /api/user/me to ensure the user starts LOGGED OUT
    await page.route('*/**/api/user/me', async (route) => {
      // Check if the request has a 'token' cookie attached
      const tokenCookie = await page.context().cookies();
      const hasAuthCookie = tokenCookie.some(cookie => cookie.name === 'token');

      if (hasAuthCookie) {
        // If there's a cookie, the user must be logged in
        await route.fulfill({
          status: 200,
          json: { id: 789, name: 'Luke Skywalker', email: 'luke@rebels.com' }
        });
      } else {
        // If there's NO cookie, the user is logged out
        await route.fulfill({ status: 401 }); // Unauthorized
      }
    });

    // Mocks for menu and franchise (same as before)
    await page.route('*/**/api/order/menu', async route => {
      const mockMenu = [
        { id: 'p-001', title: 'Veggie Pizza', description: 'Lots of veggies', price: 0.005, image: '' },
        { id: 'p-002', title: 'Pepperoni Pizza', description: 'Lots of pepperoni', price: 0.006, image: '' },
      ];
      await route.fulfill({ json: mockMenu });
    });
    await page.route('*/**/api/franchise**', async route => {
      const mockFranchises = { franchises: [{ id: 'f-101', stores: [{ id: 's-202', name: 'Downtown Pizza' }] }] };
      await route.fulfill({ json: mockFranchises });
    });

    // Mock the LOGIN API call that will happen mid-flow
    await page.route('*/**/api/auth', async route => {
      if (route.request().method() === 'PUT') {
        // In a real app, the Set-Cookie header would be here.
        // For the test, Playwright's browser context will handle the cookie.
        await route.fulfill({
          status: 200,
          json: {
            user: { id: 789, name: 'Luke Skywalker', email: 'luke@rebels.com' },
          },
          headers: {
            'Set-Cookie': 'token=mock-jwt-token-for-luke; HttpOnly; Path=/'
          }
        });
      }
    });

    // Mock the final order submission API call
    await page.route('*/**/api/order', async route => {
        const incomingOrder = route.request().postDataJSON();

        const mockConfirmation = {
            order: {
            // These fields come from the frontend request
            franchiseId: incomingOrder.franchiseId,
            storeId: incomingOrder.storeId,
            items: incomingOrder.items,
            // This ID is generated by the backend
            id: 'order-12345', 
            },
            jwt: 'mock-order-jwt-string'
        };
      await route.fulfill({ json: mockConfirmation });
    });


await page.route('**/api/order/verify', async route => {
  await route.fulfill({
    status: 200,
    json: {
      message: 'valid',
      payload: { 
        orderId: 'order-12345', 
        user: 'luke@rebels.com',
        verifiedAt: '2025-10-07T07:50:09.815Z' 
      },
    },
  });
});


    // --- 2. MENU PAGE ACTIONS (as a guest) ---
    await page.goto('/menu');
    await page.getByRole('combobox').selectOption({ label: 'Downtown Pizza' });
    await page.getByRole('button', { name: /Veggie Pizza/ }).click();
    await page.getByRole('button', { name: /Pepperoni Pizza/ }).click();
    await page.getByRole('button', { name: 'Checkout' }).click();


    // --- 3. LOGIN PAGE ACTIONS ---
    // Assert we were redirected to the special login page
    await expect(page).toHaveURL(/.*\/payment\/login/);

    // Fill out the login form
    await page.getByLabel('Email address').fill('luke@rebels.com');
    await page.getByLabel('Password').fill('ValidPassword123');
    await page.getByRole('button', { name: 'Login' }).click();


    // --- 4. PAYMENT PAGE ACTIONS (now logged in) ---
    // Assert we are now on the real payment page
    await expect(page).toHaveURL(/.*\/payment/);
    await expect(page.getByRole('heading', { name: 'So worth it' })).toBeVisible();

    // Assert the order details were preserved and are displayed correctly
    const paymentTable = page.getByRole('table');
    await expect(paymentTable).toContainText('Veggie Pizza');
    await expect(paymentTable).toContainText('Pepperoni Pizza');
    await expect(paymentTable).toContainText('0.011 ₿');
    await page.getByRole('button', { name: 'Pay now' }).click();


    // --- 5. DELIVERY PAGE ACTIONS ---
    await expect(page).toHaveURL(/.*\/delivery/);
    await expect(page.getByRole('heading', { name: 'Here is your JWT Pizza!' })).toBeVisible();
    // Find the element by its test ID
await expect(page.getByTestId('order-id')).toHaveText('order-12345');
await expect(page.getByTestId('pie-count')).toHaveText('2');
await expect(page.getByTestId('order-total')).toHaveText('0.011 ₿')

// 1. Click the "Verify" button
await page.getByRole('button', { name: 'Verify' }).click();

// 2. Locate the modal and assert that it's visible
const modal = page.locator('#hs-jwt-modal');
await expect(modal).toBeVisible();

// 3. Assert that the content inside the modal is correct based on our mock
await expect(modal).toContainText('JWT Pizza - valid');
await expect(modal).toContainText('"orderId": "order-12345"');
await expect(modal).toContainText('"user": "luke@rebels.com"');
  });

});